
# What are we trying to accomplish here?

1. Optimization as a foundation for Economics and Data Science
2. Examples from Data Science - all algos optimizing for something (for better or worse!)
3. A couple of ideas from linear algebra can go a long way, and clearly illustrate the potential of the 'linear algebra' way of thinking about things.
4. Once you see a few of the applications at work, you can see why other, more complicated ideas, could work.
5. You get to try some of these ideas and concepts on the computer using Julia, a young, high performance scientific computing programming language.

Things to potentially like:
1. Many problems can be solved in similar ways.
2. The linear algebra.
3. The Julia programming.
4. The Economic applications.
5. The Econometric (Statistics) applications.
6. The Machine Learning applications.

Even if you hate some of them, stay for some of the others.

**Today:**

(@) Syllabus.

(@) Installling Julia.

(@) Testing the language.

(@) The 'flavor' of an application.


# Installing Julia

<https://julialang.org/downloads/>

# Running Julia from the command line

Open Run (Windows Key + R), type in `rundll32 sysdm.cpl,EditEnvironmentVariables` and hit enter.
Under the "User Variables" section, find the row with "Path", and click edit.
The "Edit environment variable" UI will appear. Here, click "New", and paste in the directory noted from the installation stage. This should look something like `C:\julia\bin.`
Click OK. You can now run Julia from the command line, by typing `julia.`

# What is my current directory?

pwd

# copy it!

pwd|pbcopy

# Installing Packages

<https://github.com/eduardo-zambrano/OJEDS>
save as zip file in a local directory of your choosing.

open the zip file in that directory

for me:
/Users/ezambran/OneDrive - Cal Poly/Teaching/Microeconomics/ECON_470/OJEDS

cd "THE PATH HERE"

]
activate .

(notice the change in the prompt)

instantiate

(source: <https://pkgdocs.julialang.org/v1/environments/>)

# Test it
Use the code in https://github.com/eduardo-zambrano/OJEDS/blob/master/test.jl

first run this:
include("REPL_helper.jl")

```{julia}
using Plots

n = 100
f(x) = x^2
ϵ = randn(n)
plot(f.(ϵ), label="ϵ²")
plot!(ϵ, label="ϵ")
```

if using unicodeplots

add

```{julia}
using UnicodePlots
plt = lineplot(1:n,f.(ϵ), title="Time Series", name="The data", xlabel="t")
lineplot!(plt, 1:n,ϵ, color=:cyan, name="New data")
```

## Optimization Example

Problem Statement: A farm owner has 110 hectares of land. He grows Wheat and Barley on it. He wants to sow in such a manner as to maximize his profits according to:

| Variety | Cost/Hectare | Profit/Hectare | Man-days/Hectare |
|---------|:-----|------:|:------:|
| Wheat     | 100   |    50 |   10   |
| Barley     | 200  |   120 |  30   |

He has a budget of 10,000 units and availability of 1,200 man-days.

 Let us go solve this step by step: 

Decision Variables- x (area for growing wheat) and y (area for growing barley)
Objective Function: 50x +120y
Constraints: 100x +200y <=10000, 10x + 30y <=1200 and x+y <=110
Non negativity: x, y >=0

### Implementing in Julia

open `first_LP.jl' in VSCode
Inspect it

run it in the julia REPL using 

include("first_LP.jl")

BEFORE CLASS ENDS, in the REPL, do this:

save_REPL_history("Lecture_1_REPL.jl")

Then, GIT commit, GIT Push

* 


