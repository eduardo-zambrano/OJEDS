---
title: "ECON 470 Lecture Notes for Meeting Three"
format:
  html:
    code-fold: true
---

# Source: https://julia.quantecon.org/getting_started_julia/julia_essentials.html

```{julia}
include("REPL_helper.jl");
using OhMyREPL

# Primitive Data Types

x = true

typeof(x)

y = 1 > 2

typeof(y)

typeof(1.0)

typeof(1)

x = 2; y = 1.0;

x * y

2x - 3y


## Strings, Characters

x = "DoctorStrange"

typeof(x)

x = "F"

typeof(x)

x = 'f'

y = 'β' 
typeof(y)
z = '⚾'
typeof('z')


"y = $z"

"y² = $(y^2)"

"Doctor" * "Strange"

s = "Charlie don't surf"

split(s)

replace(s, "surf" => "climb")

strip("     Doctor Strange     ")

# Containers

## Tuple

x = ("Doctor", "Strange")

x[1] = "Nurse" # This won't work

y = ["Doctor", "Strange"]

y[1] = "Nurse"

x = [10, 20, 30, 40]

x[end]

x[end-1]

x[1:3]

x[2:end]

"DoctorStrange"[3:end]

# Iterating

actions = ["surf", "ski"]
for action in actions
    println("Charlie doesn't $action")
end

for i in 1:3
    print(i)
end

# Looping without indices
x_values = 1:5

for x in x_values
    println(x * x)
end

for i in eachindex(x_values)
    println(x_values[i] * x_values[i])
end

# Comprehensions

doubles = [ 2i for i in 1:4 ]

animals = ["dog", "cat", "bird"];   # Semicolon suppresses output

plurals = [ animal * "s" for animal in animals ]

[ i + j for i in 1:3, j in 4:6 ]

# Comparisons

x = 1

x == 2

x != 3

1 + 1E-8 ≈ 1

#Boolean Operators
x = true
!x

#short circuit and
true && false
false && true

#short circuit or
true || false
false || true


# Conditional evaluation
function test(x,y)
           if x < y
               relation = "less than"
           elseif x == y
               relation = "equal to"
           else
               relation = "greater than"
           end
           println("x is ", relation, " y.")
end

 test(1, 1)

 # Ternary operator

 # a ? b : c

 function test2(x,y)
    return x < y ? "less than" : "not less than"
 end

test2(2,2)

test2(1,2)

```

# Remember to 
1. save the REPL session.

```{julia}
save_REPL_history("Lecture_3_REPL.jl")
```

2. GIT commit and GIT push at the end of class.